import { ToolbarButton } from '@jupyterlab/apputils';
import { INotification } from 'jupyterlab_toastify';
import { executePython, showErrorToast } from './NotebookUtils';
/**
 * The CSS class for a Toolbar icon.
 */
const CSS_ICON_CLASS = 'jp-OfflineNotebookToolbarIcon';
export function getServerCloneButton(sessionContext, className, commands) {
    return new ToolbarButton({
        label: 'Clone Server Repo',
        className: className,
        iconClass: 'fab fa-git-alt ' + CSS_ICON_CLASS,
        onClick: () => {
            cloneServer(sessionContext.session.kernel, commands);
        },
        tooltip: 'Clones the rserver repo and checks out the notebook directory'
    });
}
export function cloneServer(kernel, commands) {
    // create a notification toast
    INotification.inProgress("Cloning Server Repo").then((notifier_id) => {
        executePython(kernel, getGitCloneCode()).then((controlMessage) => {
            commands.execute("filebrowser:open-path", { 'path': controlMessage.message });
            INotification.update({
                toastId: notifier_id,
                message: "Server git repository Ready at " + controlMessage.message,
                autoClose: 5000,
                type: "success"
            });
        })
            .catch((reason) => {
            console.debug(reason);
            showErrorToast(notifier_id, "Git clone Failed");
        }).finally(() => { kernel.shutdown(); });
    });
}
export function getGitCloneCode() {
    return `from dropbox.ml_platform.jupyterhub.kernels.resources.git import clone_server
clone_server()`;
}
