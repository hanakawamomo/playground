import { ReactWidget, Dialog, ToolbarButton } from '@jupyterlab/apputils';
import React from "react";
import { NbMetadata } from './metadata';
import { INotification } from 'jupyterlab_toastify';
import PackageSelector from './Components/PackageSelector';
import { executePython, showErrorToast } from './NotebookUtils';
/**
 * The CSS class for a Toolbar icon.
 */
const CSS_ICON_CLASS = 'jp-OfflineNotebookToolbarIcon';
export function updateInstallProgress(id, line) {
    const collectPtn = /^Collecting (.+)/;
    const installPtn = /^Installing collected packages: (.+)/;
    let match;
    if ((match = line.match(collectPtn)) != null) {
        INotification.update({
            toastId: id,
            message: `Collecting ${match[1]}`
        });
    }
    else if ((match = line.match(installPtn)) != null) {
        const packages = match[1].split(',');
        INotification.update({
            toastId: id,
            message: `Installing ${packages.length} packages`
        });
    }
}
export function getPackageInstallerCode(packages) {
    const packages_json = JSON.stringify(packages);
    return `from dropbox.ml_platform.tools.ml_pip.jupyterhub_package_installer import install_packages_from_jupyterhub
install_packages_from_jupyterhub(package_json_args='${packages_json}')`;
}
export function getVenvCreationCode(_metadata, cleanupOldVenvDir) {
    // testing only
    console.log(_metadata.getKernelName());
    console.log(_metadata.getvenvdir());
    var should_upload_package = JSON.stringify(false); // we no longer support pysspark kernels. TODO: clean this up
    var installedPackages_str = JSON.stringify(_metadata.getInstalledPackages());
    var venv_dir_str = JSON.stringify(cleanupOldVenvDir ? "" : _metadata.getvenvdir());
    return `from dropbox.ml_platform.jupyterhub.kernels.resources.kernel_startup import venv_setup
venv_setup(venv_dir_json='${venv_dir_str}', should_upload_package_json='${should_upload_package}', package_json_args='${installedPackages_str}')`;
}
export function makePackageListForm(ref, changeHandler, sessionContext) {
    const form = (React.createElement("div", { className: "pkg-list-form" },
        React.createElement("form", null,
            React.createElement("p", null,
                "Each notebook runs in its own isolated environment where you can use",
                ' ',
                React.createElement("a", { href: "https://sourcegraph.pp.dropbox.com/server/-/blob/dropbox/ml_platform/spark/BUILD.in#L31" }, "bazel-built packages"),
                ' ',
                "as well as install any ",
                React.createElement("i", null, "whitelisted"),
                " Python packages of your choice."),
            React.createElement("p", null,
                React.createElement("h5", null, "How to whitelist new packages?"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        "Find the package name and version at ",
                        React.createElement("a", { href: "https://pypi.org/" }, "PYPI"),
                        " or have a",
                        ' ',
                        React.createElement("code", null, "requirements.txt"),
                        " that has a list of packages you wish to install."),
                    React.createElement("li", null,
                        "Run ",
                        React.createElement("code", null, "mbzl tool //dropbox/ml_platform/tools/ml_pip whitelist"),
                        " with",
                        ' ',
                        React.createElement("code", null, "--package <package-name>==<version>"),
                        " or",
                        React.createElement("code", null, "--requirements <requirements.txt>"),
                        ". ",
                        React.createElement("br", null),
                        "Note a package needs to be whitelisted separately with",
                        ' ',
                        React.createElement("code", null, "--python python3.9"),
                        "."),
                    React.createElement("li", null,
                        "Create a revision with ",
                        React.createElement("code", null, "arc diff"),
                        "."),
                    React.createElement("li", null,
                        "Land the diff with",
                        React.createElement("code", null, "arc land --test-release //dropbox/ml_platform/jupyterhub/kernels/resources:pip-whitelist-txt.sqfs"),
                        ". Wait for the diff being landed and pushed, which can take 15~25 minutes."))),
            React.createElement(PackageSelector, { onChange: changeHandler, ref: ref, sessionContext: sessionContext }))));
    return form;
}
// Show a modal to get a package list to install
export function getPackagesToInstall(sessionContext) {
    return new Promise((resolve, reject) => {
        let selectedPackages;
        const installBtnId = 'btn-confirm-install';
        const handler = (selectedOptions) => {
            console.debug('selected', selectedOptions.values);
            selectedPackages = (selectedOptions || []).map((opt) => opt.value);
            const installBtn = document.getElementById(installBtnId);
            if (installBtn != null) {
                if (selectedPackages.length == 0) {
                    installBtn.setAttribute('disabled', 'true');
                }
                else {
                    installBtn.removeAttribute('disabled');
                }
            }
        };
        const ref = React.createRef();
        var package_selector_dialog = new Dialog({
            title: 'Install Third-Party Packages',
            body: ReactWidget.create(makePackageListForm(ref, handler, sessionContext)),
            buttons: [
                Dialog.cancelButton(),
                Dialog.okButton({
                    accept: true,
                    label: "Install",
                })
            ],
        });
        package_selector_dialog.launch().then((result) => {
            console.log(result);
            if (result.button.label == "Install" && selectedPackages != null && selectedPackages.length > 0) {
                console.log(selectedPackages);
                resolve(selectedPackages);
                return true;
            }
            else if (result.button.label == "Cancel") {
                reject('dialog dismissed');
                return false;
            }
            else {
                reject('no selected packages');
                return false;
            }
        });
    });
}
export function CreateVenv(sessionContext, nbContext, cleanupOldVenvDir = false) {
    var _metadata = new NbMetadata(nbContext);
    // create a notification toast
    INotification.inProgress("Creating Virtual Environment").then((notifier_id) => {
        executePython(sessionContext.session.kernel, getVenvCreationCode(_metadata, cleanupOldVenvDir), updateInstallProgress.bind(null, notifier_id)).then((controlMessage) => {
            _metadata.updatevenvDir(controlMessage.venv_dir);
            INotification.update({
                toastId: notifier_id,
                message: "Virtual Environment Ready!",
                autoClose: 5000,
                type: "success"
            });
        })
            .catch((reason) => {
            console.debug(reason);
            showErrorToast(notifier_id, "Virtual Env Creation Failed");
        });
    });
}
export function getVenvButton(sessionContext, nbContext, className) {
    return new ToolbarButton({
        label: 'Recreate Venv',
        className: className,
        iconClass: 'fas fa-cube ' + CSS_ICON_CLASS,
        onClick: () => {
            CreateVenv(sessionContext, nbContext, true);
        },
        tooltip: 'Recreates a new venv and reinstalls pip packages'
    });
}
export function getPackageInstallerButton(sessionContext, nbContext, className) {
    return new ToolbarButton({
        className: className,
        label: 'Install Packages',
        iconClass: 'fas fa-cubes ' + CSS_ICON_CLASS,
        onClick: () => {
            getPackagesToInstall(sessionContext)
                .then((packages) => {
                var _metadata = new NbMetadata(nbContext);
                const packages_json = JSON.stringify(packages);
                console.debug(`install '${packages_json}'`);
                // create a notification toast
                INotification.inProgress("Installing packages!").then((notifier_id) => {
                    executePython(sessionContext.session.kernel, getPackageInstallerCode(packages), updateInstallProgress.bind(null, notifier_id))
                        .then(() => {
                        _metadata.updateInstalledPackages(packages);
                        INotification.update({
                            toastId: notifier_id,
                            message: `'${packages.length}' packages installed`,
                            autoClose: 5000,
                            type: "success"
                        });
                    })
                        .catch((reason) => {
                        console.debug(reason);
                        showErrorToast(notifier_id, "Package Installation Failed");
                    });
                });
            });
        },
    });
}
