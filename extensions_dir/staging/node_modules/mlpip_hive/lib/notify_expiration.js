import * as React from 'react';
import { INotification } from 'jupyterlab_toastify';
import { KernelManager } from '@jupyterlab/services';
import { executePython } from './NotebookUtils';
const MINUTE = 60 * 1000;
const HOUR = 60 * MINUTE;
const DAY = 24 * HOUR;
const getUTCNow = () => new Date().getTime();
const useCountdown = (endTime) => {
    const [timeRemaining, setTimeRemaining] = React.useState(endTime - getUTCNow());
    const [done, setDone] = React.useState(timeRemaining <= 0);
    const intervalRef = React.useRef();
    const stopTicking = () => intervalRef.current && clearInterval(intervalRef.current);
    const startTicking = () => {
        intervalRef.current = setInterval(() => setTimeRemaining(endTime - getUTCNow()), 10 * MINUTE /* update state every 10 minutes */);
        return stopTicking;
    };
    React.useEffect(startTicking, [endTime]);
    React.useEffect(() => setDone(timeRemaining <= 0), [timeRemaining]);
    React.useEffect(() => {
        if (done) {
            console.debug('countdown completed');
            stopTicking();
        }
    }, [done]);
    const formatCountdownData = (timeRemaining) => {
        const days = Math.floor(timeRemaining / DAY);
        const hours = Math.floor((timeRemaining % DAY) / HOUR);
        return { days, hours, done };
    };
    return formatCountdownData(timeRemaining);
};
const ExpirationNotice = ({ expiresAt }) => {
    const { days, hours, done } = useCountdown(expiresAt);
    const pluralize = (count, noun, suffix = 's') => `${count} ${noun}${count !== 1 ? suffix : ''}`;
    const expirationInfo = days + hours === 0
        ? `in less than an hour`
        : `in ${pluralize(days, 'day')} and ${pluralize(hours, 'hour')}`;
    return (React.createElement("span", { className: "expiration-notice" },
        React.createElement("p", null,
            done
                ? `Your notebook server session has expired. `
                : `Your notebook server session will expire ${expirationInfo}. `,
            `Please save your work, commit any changes in git and push to remote. `),
        React.createElement("br", null),
        React.createElement("p", null,
            `To restart a new server, go to `,
            React.createElement("a", { href: "/hub/home" }, "Control Panel"),
            `, press 'Stop My Server' and then 'Start My Server'.`)));
};
const calculateNotifyTime = (expiresAt, expiresIn) => {
    const expirationDay = new Date(expiresAt).getDay();
    // notify approximately 1 day before expiration or on friday if day of expiration is sunday or monday
    const bufferTime = expirationDay === 1 ? 3 * DAY : expirationDay === 0 ? 2 * DAY : DAY;
    return expiresIn - bufferTime;
};
export const notifyExpiration = async () => {
    const kernel = await new KernelManager().startNew({ name: 'basic_python3' });
    let expiresAt = Infinity; // milliseconds since epoch at which the session will expire
    let expiresIn = Infinity; // how long in milliseconds the session stays valid
    try {
        const control = await executePython(kernel, `from dropbox.ml_platform.jupyterhub.kernels.resources.notify_expiration import send_expiration_date; send_expiration_date()`);
        if (!!control.expires_at) {
            expiresAt = parseFloat(control.expires_at);
            expiresIn = expiresAt - getUTCNow();
        }
    }
    catch (e) {
        console.debug('Failed to fetch expiration date from server, no big deal', e);
    }
    finally {
        kernel.shutdown();
    }
    if (expiresIn === Infinity) {
        return;
    }
    const notifyIn = calculateNotifyTime(expiresAt, expiresIn);
    console.debug('Notify expiration in', notifyIn, 'ms');
    const message = React.createElement(ExpirationNotice, { expiresAt: expiresAt });
    if (notifyIn <= 0) {
        INotification.warning(message, { autoClose: false });
    }
    else {
        setTimeout(() => INotification.warning(message, { autoClose: false }), notifyIn);
    }
};
