import { ReactWidget, } from '@jupyterlab/apputils';
import * as React from 'react';
import { HTMLSelect } from '@jupyterlab/ui-components';
/**
 * The class name added to toolbar cell type dropdown wrapper.
 */
const TOOLBAR_CELLTYPE_CLASS = 'jp-Notebook-toolbarCellType';
/**
 * The class name added to toolbar cell type dropdown.
 */
const TOOLBAR_CELLTYPE_DROPDOWN_CLASS = 'jp-Notebook-toolbarCellTypeDropdown';
/**
 * Regex pattern to extract magics from a cell
 */
const MAGIC_PATTERN = /^%{1,2}(presto|hive)(\s+.*)*$/m;
export function createMagicSwitcher(panel) {
    return new MagicSwitcher(panel.content);
}
/**
 * A toolbar widget that switches magic used in the cell.
 */
export class MagicSwitcher extends ReactWidget {
    /**
     * Construct a new cell type switcher.
     */
    constructor(widget) {
        super();
        /**
         * Handle `change` events for the HTMLSelect component.
         */
        this.handleChange = (event) => {
            if (event.target.value !== 'Select Magic') {
                switch (event.target.value) {
                    case "presto":
                    case "hive":
                        var to_replace = event.target.value;
                        var match = MAGIC_PATTERN.exec(this._notebook.activeCell.model.value.text);
                        if (match) {
                            this._notebook.activeCell.model.value.text = this._notebook.activeCell.model.value.text.replace(match[1], to_replace);
                        }
                        else {
                            this._notebook.activeCell.model.value.text = "%%" + to_replace + "\n" + this._notebook.activeCell.model.value.text;
                        }
                        this.update();
                        this._notebook.activate();
                        break;
                    default:
                        break;
                }
            }
        };
        /**
         * Handle `keydown` events for the HTMLSelect component.
         */
        this.handleKeyDown = (event) => {
            if (event.keyCode === 13) {
                this._notebook.activate();
            }
        };
        this._notebook = null;
        this.addClass(TOOLBAR_CELLTYPE_CLASS);
        this._notebook = widget;
        if (widget.model) {
            this.update();
        }
        widget.activeCellChanged.connect(this.update, this);
        // Follow a change in the selection.
        widget.selectionChanged.connect(this.update, this);
    }
    render() {
        let value = 'Select Magic';
        if (this._notebook.activeCell) {
            if (this._notebook.activeCell.model.type == "code") {
                var matches = MAGIC_PATTERN.exec(this._notebook.activeCell.model.value.text);
                if (matches) {
                    value = matches[1];
                }
            }
        }
        // make sure if multiple cells are selected we
        // display the magic type only if all cells are of the same
        // type.
        for (let widget of this._notebook.widgets) {
            if (this._notebook.isSelectedOrActive(widget)) {
                if (widget.model.type !== "code") {
                    value = 'Select Magic';
                    break;
                }
                var matches = MAGIC_PATTERN.exec(widget.model.value.text);
                if (!matches) {
                    value = 'Select Magic';
                    break;
                }
                if (matches[1] !== value) {
                    value = 'Select Magic';
                    break;
                }
            }
        }
        return (React.createElement(HTMLSelect, { className: TOOLBAR_CELLTYPE_DROPDOWN_CLASS, onChange: this.handleChange, onKeyDown: this.handleKeyDown, value: value },
            React.createElement("option", { value: "Select Magic" }, "Select Magic"),
            React.createElement("option", { value: "hive" }, "Hive"),
            React.createElement("option", { value: "presto" }, "Presto")));
    }
}
