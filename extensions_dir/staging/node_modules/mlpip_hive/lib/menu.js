import { IMainMenu } from '@jupyterlab/mainmenu';
import { IStatusBar } from '@jupyterlab/statusbar';
import { ILabStatus } from '@jupyterlab/application';
import { Widget, Menu } from '@lumino/widgets';
import { KernelManager } from '@jupyterlab/services';
import { cloneServer } from './git';
import { notifyExpiration } from './notify_expiration';
export const docMenuExtension = {
    id: 'doc-menu',
    requires: [IMainMenu, IStatusBar, ILabStatus],
    autoStart: true,
    activate: async (app, mainMenu, statusBar, labStatus) => {
        console.log('JupyterLab menu extension is activated!');
        addDropboxHelpMenu(app, mainMenu);
        addDropboxMenu(app, mainMenu);
        notifyExpiration(); // not part of the menu, inserting here for convenience
        await displayRestrictedEnvStatus(statusBar);
    }
};
function addDropboxHelpMenu(app, mainMenu) {
    // create Dropbox help menu
    const { commands } = app;
    let menu = new Menu({ commands });
    menu.title.label = "Dropbox Help";
    // add dbx-doc to help menu
    const helpCommand = 'dbx-doc';
    createJupyterHelpCommand(app, helpCommand);
    menu.addItem({ command: helpCommand });
    // add hive magic doc to help menu
    const hivemagicCommand = 'dbx-hive-magic';
    createHiveMagicHelpCommand(app, hivemagicCommand);
    menu.addItem({ command: hivemagicCommand });
    mainMenu.addMenu(menu, { rank: 60 });
}
function addDropboxMenu(app, mainMenu) {
    // create Dropbox menu
    const { commands } = app;
    let menu = new Menu({ commands });
    menu.title.label = "Dropbox";
    // add clonerserver to menu
    const cloneServer = 'git:clonerServer';
    createCloneCommand(app, cloneServer);
    menu.addItem({ command: cloneServer });
    mainMenu.addMenu(menu, { rank: 60 });
}
async function displayRestrictedEnvStatus(statusBar) {
    // Display restricted environment in status bar
    const statusWidget = new Widget();
    const kernelManager = new KernelManager();
    const kernel = await kernelManager.startNew({ name: 'basic_python3' });
    statusBar.registerStatusItem('lab-status', {
        align: 'middle',
        rank: 0,
        item: statusWidget
    });
    const future = kernel.requestExecute({ code: `import os;print(os.environ.get("JUPYTER_NB_RESTRICTED_PATH_PREFIX", ""))` });
    // Handle iopub messages
    future.onIOPub = (msg) => {
        if (msg.header.msg_type != 'status') {
            statusWidget.node.textContent = msg.content.text;
        }
    };
    await future.done;
    kernel.shutdown();
}
function createJupyterHelpCommand(app, commandID) {
    app.commands.addCommand(commandID, {
        label: 'Dbx Documentation',
        isEnabled: () => true,
        isVisible: () => true,
        execute: () => {
            window.open("https://www.dropbox.com/scl/fi/pm82gzzrqopbnf213lfqu/JupyterHub-environment.paper?dl=0&rlkey=hzrg0rb0yf93hlbewjwv8by7c", "_blank", "noreferrer=yes");
        }
    });
}
function createHiveMagicHelpCommand(app, commandID) {
    app.commands.addCommand(commandID, {
        label: 'Hive Magic Documentation',
        isEnabled: () => true,
        isVisible: () => true,
        execute: () => {
            window.open("https://www.dropbox.com/scl/fi/3ij3826nzolm32h0d9k7p/Hive-and-Presto-Magic-in-Jupyter-Notebooks.paper?dl=0&rlkey=e49i67li960hns4zwgh9ma9eg", "_blank", "noreferrer=yes");
        }
    });
}
function createCloneCommand(app, commandID) {
    app.commands.addCommand(commandID, {
        label: 'Clone rServer Repo',
        execute: async () => {
            const kernelManager = new KernelManager();
            const kernel = await kernelManager.startNew({ name: 'basic_python3' });
            cloneServer(kernel, app.commands);
        }
    });
}
