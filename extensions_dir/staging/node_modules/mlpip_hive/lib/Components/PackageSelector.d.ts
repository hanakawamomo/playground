import * as React from 'react';
import Select, { ActionMeta, InputActionMeta, OptionTypeBase, ValueType, OptionsType } from 'react-select';
import { ISessionContext } from '@jupyterlab/apputils';
declare type PackageVerTuple = [string, string];
declare type PackageList = PackageVerTuple[];
export interface PackageOption extends OptionTypeBase {
    isDisabled: boolean;
}
export declare type PackageChangedHandler = (value: ValueType<PackageOption, true> | PackageOption, actionMeta: ActionMeta<PackageOption>) => void;
interface PackageSelectorProps {
    onChange: PackageChangedHandler;
    sessionContext: ISessionContext;
}
interface PackageSelectorStates {
    isLoading: boolean;
    options: OptionsType<PackageOption>;
    selected: ValueType<PackageOption, true>;
    input: string;
    showInstalled: boolean;
    isMenuOpened: boolean;
}
export default class PackageSelector extends React.Component<PackageSelectorProps, PackageSelectorStates> {
    selectRef: React.RefObject<Select<PackageOption>>;
    private _sessionContext;
    constructor(props: PackageSelectorProps);
    componentDidMount(): void;
    _makeOptions(whitelisted: PackageList, bazelInstalled: PackageList, pipInstalled: PackageList): ValueType<PackageOption, true>;
    _loadPackageList(): void;
    _inputChanged: (input: string, action: InputActionMeta) => void;
    _selectChanged: PackageChangedHandler;
    _toggleShowInstalled: () => void;
    focus(): void;
    _menuOpened: () => void;
    _menuClosed: () => void;
    _onKeyDown: (e: React.KeyboardEvent) => void;
    render(): JSX.Element;
}
export {};
