import * as React from 'react';
import Select, { NonceProvider } from 'react-select';
import { executePython, logServerException } from '../NotebookUtils';
import { NbMetadata } from '../metadata';
export default class HiveSessionConnector extends React.Component {
    constructor(props) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        super(props);
        this.selectRef = React.createRef();
        this._handleChange = (e) => {
            const stateName = e.target.name;
            const value = e.target.value;
            // TODO: Seems like there's a known bug in Typescript where the below
            // code doesn't work. Is there an elegant workaround for this?
            // this.setState({
            //     [stateName]: value
            // });
            switch (stateName) {
                case "heraclesCluster":
                    this.setState({ heraclesCluster: value });
                    break;
                case "heraclesApp":
                    this.setState({ heraclesApp: value });
                    break;
                case "driverMemory":
                    this.setState({ driverMemory: value });
                    break;
                case "driverCores":
                    this.setState({ driverCores: value });
                    break;
                case "executorMemory":
                    this.setState({ executorMemory: value });
                    break;
                case "executorCores":
                    this.setState({ executorCores: value });
                    break;
                case "numExecutors":
                    this.setState({ numExecutors: value });
                    break;
            }
        };
        this._selectChanged = (selectedOptions, _actionMeta) => {
            this.setState({
                hiveDbSelected: (selectedOptions) ? selectedOptions : []
            });
        };
        this._checkChanged = (e) => {
            const checkName = e.target.name;
            const value = e.target.checked;
            switch (checkName) {
                case "showAdvanced":
                    this.setState({ showAdvanced: value });
                    break;
                case "enableArrowExecution":
                    this.setState({ enableArrowExecution: value });
                    break;
                case "verifyPartitions":
                    this.setState({ verifyPartitions: value });
                    break;
                case "readAccessClogger":
                    this.setState({ readAccessClogger: value });
                    break;
                case "readAccessEvents":
                    this.setState({ readAccessEvents: value });
                    break;
                case "readAccessEventsStaging":
                    this.setState({ readAccessEventsStaging: value });
                    break;
                case "readAccessDummy":
                    this.setState({ readAccessDummy: value });
                    break;
            }
        };
        this._prependNewCellsWithSparkMagicChanged = (e) => {
            const value = e.target.checked;
            this.setState({ prependNewCellsWithSparkMagic: value });
            var saved_state = this.nbMetadata.getSparkSessionSettings();
            saved_state.prepend_new_cells_with_spark_magic = value;
            this.nbMetadata.updateSparkSessionSettings(saved_state);
        };
        // Initialize from saved settings, if there are any
        this.nbMetadata = new NbMetadata(props.nbContext);
        this.sessionContext = props.sessionContext;
        const saved_state = this.nbMetadata.getSparkSessionSettings();
        this.state = {
            isLoading: false,
            hiveDbOptions: [],
            hiveDbSelected: (_a = saved_state.selected_databases) !== null && _a !== void 0 ? _a : [],
            showAdvanced: false,
            // Select a random DMRv2 cluster until load balancer gets deployed
            heraclesCluster: (_b = saved_state.heracles_cluster) !== null && _b !== void 0 ? _b : ["prod0", "prod1"][Math.floor(Math.random() * 2)],
            heraclesApp: (_c = saved_state.heracles_app) !== null && _c !== void 0 ? _c : "ignite_baseapp_py3",
            driverMemory: (_d = saved_state.driver_memory) !== null && _d !== void 0 ? _d : "16G",
            driverCores: (_e = saved_state.driver_cores) !== null && _e !== void 0 ? _e : "4",
            executorMemory: (_f = saved_state.executor_memory) !== null && _f !== void 0 ? _f : "4G",
            executorCores: (_g = saved_state.executor_cores) !== null && _g !== void 0 ? _g : "2",
            numExecutors: (_h = saved_state.num_executors) !== null && _h !== void 0 ? _h : "8",
            enableArrowExecution: (_j = saved_state.enable_arrow_execution) !== null && _j !== void 0 ? _j : true,
            verifyPartitions: (_k = saved_state.verify_partitions) !== null && _k !== void 0 ? _k : false,
            readAccessClogger: (_l = saved_state.read_access_clogger) !== null && _l !== void 0 ? _l : true,
            readAccessEvents: (_m = saved_state.read_access_events) !== null && _m !== void 0 ? _m : true,
            readAccessEventsStaging: (_o = saved_state.read_access_events_staging) !== null && _o !== void 0 ? _o : false,
            readAccessDummy: (_p = saved_state.read_access_dummy) !== null && _p !== void 0 ? _p : false,
            prependNewCellsWithSparkMagic: (_q = saved_state.prepend_new_cells_with_spark_magic) !== null && _q !== void 0 ? _q : true,
        };
    }
    static saveStateAsNotebookMetadata(state, nbMetadata) {
        nbMetadata.updateSparkSessionSettings({
            selected_databases: state.hiveDbSelected,
            heracles_cluster: state.heraclesCluster,
            heracles_app: state.heraclesApp,
            driver_memory: state.driverMemory,
            driver_cores: state.driverCores,
            executor_memory: state.executorMemory,
            executor_cores: state.executorCores,
            num_executors: state.numExecutors,
            enable_arrow_execution: state.enableArrowExecution,
            verify_partitions: state.verifyPartitions,
            read_access_clogger: state.readAccessClogger,
            read_access_events: state.readAccessEvents,
            read_access_events_staging: state.readAccessEventsStaging,
            read_access_dummy: state.readAccessDummy,
            prepend_new_cells_with_spark_magic: state.prependNewCellsWithSparkMagic,
        });
    }
    componentDidMount() {
        this._loadHiveDatabaseList();
    }
    _loadHiveDatabaseList() {
        this.setState({ isLoading: true });
        executePython(this.sessionContext.session.kernel, `from dropbox.ml_platform.jupyterhub.kernels.resources.hive_connector_utils import get_hive_database_list_for_current_user
get_hive_database_list_for_current_user()`)
            .then(control => {
            // TODO (aleksander): Hive DBs USER and restricted_USER are always accessible!
            // In the future, modify UI so it always shows USER and restricted_USER in the
            // selected databases, but disabled (so they cannot be removed)
            this.setState({
                hiveDbOptions: control.databases.map(db_entry => ({
                    value: db_entry.value,
                    label: db_entry.label,
                })),
                isLoading: false
            });
        })
            .catch(err_msg => {
            this.setState({
                isLoading: false
            });
            console.error('Failed to get Hive database list');
            logServerException(err_msg.content);
        });
    }
    render() {
        return (
        // @ts-ignore
        React.createElement(NonceProvider, { nonce: "" },
            React.createElement(Select, { isMulti: true, isLoading: this.state.isLoading, placeholder: "Choose databases to connect to...", options: this.state.hiveDbOptions, value: this.state.hiveDbSelected, className: "hive-database-select", classNamePrefix: "select", onChange: this._selectChanged, ref: this.selectRef, menuPortalTarget: document.body, menuPosition: 'fixed', menuPlacement: 'bottom', menuShouldScrollIntoView: false, styles: { menuPortal: base => ({ ...base, zIndex: 99999 }) } }),
            React.createElement("label", { className: "hive-advanced-settings-checkbox" },
                React.createElement("input", { name: "showAdvanced", type: "checkbox", checked: this.state.showAdvanced, onChange: this._checkChanged }),
                " Show advanced settings"),
            this.state.showAdvanced &&
                React.createElement("div", { className: "hive-advanced-settings-container" },
                    React.createElement("div", { className: "hive-advanced-settings-grid" },
                        React.createElement("div", { className: "hive-advanced-settings-group" },
                            React.createElement("h4", null, "Heracles settings"),
                            React.createElement("label", null, "Heracles cluster"),
                            " ",
                            React.createElement("input", { type: "text", className: "form-control", name: "heraclesCluster", value: this.state.heraclesCluster, onChange: this._handleChange }),
                            React.createElement("label", null, "Heracles app"),
                            " ",
                            React.createElement("input", { type: "text", className: "form-control", name: "heraclesApp", value: this.state.heraclesApp, onChange: this._handleChange })),
                        React.createElement("div", { className: "hive-advanced-settings-group" },
                            React.createElement("h4", null, "Driver settings"),
                            React.createElement("label", null, "Driver memory"),
                            " ",
                            React.createElement("input", { type: "text", className: "form-control", name: "driverMemory", value: this.state.driverMemory, onChange: this._handleChange }),
                            React.createElement("label", null, "Driver cores"),
                            " ",
                            React.createElement("input", { type: "number", className: "form-control", name: "driverCores", value: this.state.driverCores, onChange: this._handleChange })),
                        React.createElement("div", { className: "hive-advanced-settings-group" },
                            React.createElement("h4", null, "Executor settings"),
                            React.createElement("label", null, "Executor memory"),
                            " ",
                            React.createElement("input", { type: "text", className: "form-control", name: "executorMemory", value: this.state.executorMemory, onChange: this._handleChange }),
                            React.createElement("label", null, "Executor cores"),
                            " ",
                            React.createElement("input", { type: "number", className: "form-control", name: "executorCores", value: this.state.executorCores, onChange: this._handleChange }),
                            React.createElement("label", null, "Number of executors"),
                            " ",
                            React.createElement("input", { type: "number", className: "form-control", name: "numExecutors", value: this.state.numExecutors, onChange: this._handleChange }))),
                    React.createElement("label", null,
                        React.createElement("input", { name: "enableArrowExecution", type: "checkbox", checked: this.state.enableArrowExecution, onChange: this._checkChanged }),
                        " Enable PyArrow execution (e.g. speeds up ",
                        React.createElement("code", null, "toPandas"),
                        " conversions)"),
                    React.createElement("br", null),
                    React.createElement("label", null,
                        React.createElement("input", { name: "verifyPartitions", type: "checkbox", checked: this.state.verifyPartitions, onChange: this._checkChanged }),
                        " Verify partitions (significantly slows down queries, but required for some cLogger-backed tables)"),
                    React.createElement("br", null),
                    React.createElement("label", null,
                        React.createElement("input", { name: "readAccessClogger", type: "checkbox", checked: this.state.readAccessClogger, onChange: this._checkChanged }),
                        " Request read access to ",
                        React.createElement("code", null, "restricted_raw_clogger"),
                        " and ",
                        React.createElement("code", null, "restricted_raw_clogger_kafka_connect")),
                    React.createElement("br", null),
                    React.createElement("label", null,
                        React.createElement("input", { name: "readAccessEvents", type: "checkbox", checked: this.state.readAccessEvents, onChange: this._checkChanged }),
                        " Request read access to ",
                        React.createElement("code", null, "restricted_raw_events")),
                    React.createElement("br", null),
                    React.createElement("label", null,
                        React.createElement("input", { name: "readAccessEventsStaging", type: "checkbox", checked: this.state.readAccessEventsStaging, onChange: this._checkChanged }),
                        " Request read access to ",
                        React.createElement("code", null, "restricted_raw_events_staging")),
                    React.createElement("br", null),
                    React.createElement("label", null,
                        React.createElement("input", { name: "readAccessDummy", type: "checkbox", checked: this.state.readAccessDummy, onChange: this._checkChanged }),
                        " Request read access to Hive ",
                        React.createElement("code", null, "_dummy_table")),
                    React.createElement("br", null),
                    React.createElement("label", null,
                        React.createElement("input", { name: "prependNewCellsWithSparkMagic", type: "checkbox", checked: this.state.prependNewCellsWithSparkMagic, onChange: this._prependNewCellsWithSparkMagicChanged }),
                        " Prepend new cells with ",
                        React.createElement("code", null, "%%spark"),
                        " (saved instantly)")),
            this.state.hiveDbSelected.length > 0 &&
                React.createElement(React.Fragment, null,
                    React.createElement("p", null, "When you click \"Connect\", your settings will be saved and an interactive PySpark session will be created for you in Heracles. If you previously created a session in this notebook, it will be cleaned up."),
                    this.state.hiveDbSelected.length > 3 &&
                        React.createElement(React.Fragment, null,
                            React.createElement("br", null),
                            React.createElement("div", { className: "alert alert-warning", role: "alert" },
                                React.createElement("strong", null, "Warning: Due to AWS limitations, your session can only access a limited number of Hive databases at once."),
                                React.createElement("br", null),
                                "If you have errors when creating your session, try decreasing the number of databases you want it to access. You can also try removing some default namespaces from the advanced settings, but this might cause queries to tables that are backed by those namespaces to fail.")))));
    }
}
