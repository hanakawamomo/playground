import * as React from 'react';
import _ from 'lodash';
import Select from 'react-select';
import { executePython } from './../NotebookUtils';
// declare const PP_NONCE: string;
const Checkbox = (props) => React.createElement("input", Object.assign({ type: "checkbox" }, props));
function pkgVerTupleToRequirement(pkgVer) {
    return `${pkgVer[0]}==${pkgVer[1]}`;
}
function requirementToPkgVerTuple(requirement) {
    const [name, ver] = requirement.split('==');
    return [name, ver];
}
function pkgVerTupleToLabel(pkgVer, isInstalled, source) {
    return (React.createElement("div", null,
        React.createElement("span", { className: "pkg-name" }, pkgVer[0]),
        " ",
        React.createElement("span", { className: "pkg-version" }, pkgVer[1]),
        isInstalled ? React.createElement("span", { className: "pkg-installed" },
            "(",
            source,
            ")") : null));
}
export default class PackageSelector extends React.Component {
    constructor(props) {
        super(props);
        this.selectRef = React.createRef();
        this._inputChanged = (input, action) => {
            if (action.action == 'set-value') {
                this.setState({ input: '' });
                return;
            }
            if (action.action != 'input-change') {
                return;
            }
            const requirements = input.split(/ +/);
            const pkgList = requirements.map(requirementToPkgVerTuple).map(pkgVer => ({
                value: pkgVerTupleToRequirement(pkgVer),
                label: pkgVerTupleToLabel(pkgVer),
                isDisabled: false
            }));
            const validPkgList = _.intersectionBy(pkgList, this.state.options.filter(x => !x.isDisabled), 'value');
            const pkgsToAdd = _.differenceBy(validPkgList, this.state.selected, 'value');
            if (validPkgList.length > 0) {
                let newInput = input;
                validPkgList.forEach((pkg) => {
                    newInput = newInput.replace(pkg.value, '');
                });
                const selected = (this.state.selected || []).concat(pkgsToAdd);
                this.setState({
                    selected,
                    input: newInput.trim()
                });
                if (this.props.onChange) {
                    this.props.onChange(selected, null);
                }
            }
            else {
                this.setState({ input });
            }
        };
        this._selectChanged = (selectedOptions, actionMeta) => {
            this.setState({
                selected: selectedOptions
            });
            if (this.props.onChange) {
                this.props.onChange(selectedOptions, actionMeta);
            }
        };
        this._toggleShowInstalled = () => {
            this.setState({ showInstalled: !this.state.showInstalled });
        };
        this._menuOpened = () => {
            this.setState({ isMenuOpened: true });
        };
        this._menuClosed = () => {
            this.setState({ isMenuOpened: false });
        };
        this._onKeyDown = (e) => {
            if (!this.state.isMenuOpened && e.keyCode == 13) {
                e.preventDefault();
            }
        };
        this.state = {
            isLoading: false,
            options: [],
            selected: [],
            input: '',
            isMenuOpened: false,
            showInstalled: true
        };
        this._sessionContext = props.sessionContext;
    }
    componentDidMount() {
        this._loadPackageList();
    }
    _makeOptions(whitelisted, bazelInstalled, pipInstalled) {
        const bazelPkgs = bazelInstalled.map(pkgVer => ({
            value: pkgVerTupleToRequirement(pkgVer),
            label: pkgVerTupleToLabel(pkgVer, true, 'bazel'),
            isDisabled: true
        }));
        const pipPkgs = pipInstalled.map(pkgVer => ({
            value: pkgVerTupleToRequirement(pkgVer),
            label: pkgVerTupleToLabel(pkgVer, true, 'pip'),
            isDisabled: true
        }));
        const whitelistedPkgs = whitelisted.map(pkgVer => ({
            value: pkgVerTupleToRequirement(pkgVer),
            label: pkgVerTupleToLabel(pkgVer),
            isDisabled: false
        }));
        const installable = _.differenceBy(whitelistedPkgs, pipPkgs, 'value');
        const allPackages = installable.concat(bazelPkgs).concat(pipPkgs);
        return allPackages.sort((a, b) => {
            return a.val < b.val ? -1 : a.val > b.val ? 1 : 0;
        });
    }
    _loadPackageList() {
        this.setState({ isLoading: true });
        var code = `from dropbox.ml_platform.jupyterhub.kernels.resources.package_manager import get_package_lists_from_jupyterhub
get_package_lists_from_jupyterhub()`;
        executePython(this._sessionContext.session.kernel, code, (msg) => { console.debug(msg); }, () => { })
            .then(control => {
            this.setState({
                options: this._makeOptions(control.whitelist, control.bazel, control.pip),
                isLoading: false
            });
        })
            .catch(err_msg => {
            this.setState({
                isLoading: false
            });
            console.error('Failed to get package list');
            console.debug(err_msg.content);
        });
    }
    focus() {
        if (this.selectRef != null && this.selectRef.current != null) {
            this.selectRef.current.focus();
        }
    }
    render() {
        const { showInstalled, options, isLoading, selected, input } = this.state;
        return (React.createElement("span", null,
            React.createElement(Select, { isMulti: true, isLoading: isLoading, options: showInstalled ? options : options.filter((x) => !x.isDisabled), placeholder: "Search packages or paste frozen requirements...", className: "pkg-list-select", classNamePrefix: "select", onChange: this._selectChanged, onInputChange: this._inputChanged, onMenuOpen: this._menuOpened, onMenuClose: this._menuClosed, onKeyDown: this._onKeyDown, value: selected, inputValue: input, ref: this.selectRef, menuPortalTarget: document.body, menuPosition: 'fixed', menuPlacement: 'bottom', menuShouldScrollIntoView: false, styles: { menuPortal: base => ({ ...base, zIndex: 99999 }) } }),
            React.createElement("span", { className: "pkg-select-checkbox" },
                React.createElement("label", null,
                    React.createElement(Checkbox, { checked: this.state.showInstalled, onChange: this._toggleShowInstalled }),
                    ' ',
                    "Show installed packages"))));
    }
}
