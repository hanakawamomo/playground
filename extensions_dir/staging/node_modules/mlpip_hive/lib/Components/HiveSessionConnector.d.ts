import * as React from 'react';
import Select, { ActionMeta, OptionTypeBase, ValueType } from 'react-select';
import { NbMetadata } from '../metadata';
import { INotebookModel } from '@jupyterlab/notebook';
import { DocumentRegistry } from '@jupyterlab/docregistry';
import { ISessionContext } from '@jupyterlab/apputils';
export interface DatabaseOption extends OptionTypeBase {
}
export declare type DatabaseChangedHandler = (selectedOptions: ValueType<DatabaseOption, true> | DatabaseOption, actionMeta: ActionMeta<DatabaseOption>) => void;
export interface HiveSessionConnectorProps {
    sessionContext: ISessionContext;
    nbContext: DocumentRegistry.IContext<INotebookModel>;
}
export interface HiveSessionConnectorStates {
    isLoading: boolean;
    hiveDbOptions: ValueType<DatabaseOption, true>;
    hiveDbSelected: ValueType<DatabaseOption, true>;
    showAdvanced: boolean;
    heraclesCluster: string;
    heraclesApp: string;
    driverMemory: string;
    driverCores: string;
    executorMemory: string;
    executorCores: string;
    numExecutors: string;
    enableArrowExecution: boolean;
    verifyPartitions: boolean;
    readAccessClogger: boolean;
    readAccessEvents: boolean;
    readAccessEventsStaging: boolean;
    readAccessDummy: boolean;
    prependNewCellsWithSparkMagic: boolean;
}
export default class HiveSessionConnector extends React.Component<HiveSessionConnectorProps, HiveSessionConnectorStates> {
    selectRef: React.RefObject<Select<DatabaseOption>>;
    nbMetadata: NbMetadata;
    sessionContext: ISessionContext;
    constructor(props: HiveSessionConnectorProps);
    static saveStateAsNotebookMetadata(state: HiveSessionConnectorStates, nbMetadata: NbMetadata): void;
    componentDidMount(): void;
    _loadHiveDatabaseList(): void;
    _handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    _selectChanged: DatabaseChangedHandler;
    _checkChanged: (e: React.ChangeEvent<HTMLInputElement>) => void;
    _prependNewCellsWithSparkMagicChanged: (e: React.ChangeEvent<HTMLInputElement>) => void;
    render(): JSX.Element;
}
