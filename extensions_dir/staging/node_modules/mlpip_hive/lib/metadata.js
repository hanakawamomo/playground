export class NbMetadata {
    constructor(context) {
        this._context = context;
        if (this._context.model.metadata.get("dbx_ml") == null) {
            this._context.model.metadata.set("dbx_ml", { "pip_installed_packages": {} });
            this._context.save();
        }
    }
    updateDbxMetadata(key, value) {
        var dbxMlValues = this.getDbxMetadata();
        dbxMlValues[key] = value;
        this._context.model.metadata.set("dbx_ml", dbxMlValues);
        this._context.save();
    }
    getDbxMetadata() {
        return this._context.model.metadata.get("dbx_ml");
    }
    updatevenvDir(venvdir) {
        this.updateDbxMetadata("venv_dir", venvdir);
    }
    getvenvdir() {
        return this.getDbxMetadata()["venv_dir"] || "";
    }
    // parse the packages and write to notebook metadata
    updateInstalledPackages(packages_to_install) {
        var installed_packages = this.getDbxMetadata()["pip_installed_packages"];
        var current_list = installed_packages[this.getPythonVersion()] || [];
        current_list.push(...packages_to_install);
        // maintain backward compat with current metadata scheme used in jupyterhub
        // which supports multiple kernel versions
        var uniq = [...new Set(current_list)];
        this._context.model.metadata.set("dbx_ml", { "pip_installed_packages": { [this.getPythonVersion()]: uniq } });
        this._context.save();
    }
    getInstalledPackages() {
        var packages = [];
        var pip_installed_packages = this.getDbxMetadata()["pip_installed_packages"] || {};
        if (this.getPythonVersion() in pip_installed_packages) {
            packages = pip_installed_packages[this.getPythonVersion()];
        }
        return packages;
    }
    updateSparkSessionSettings(sparkSettings) {
        this.updateDbxMetadata("dbx_spark_settings", sparkSettings);
    }
    getSparkSessionSettings() {
        return this.getDbxMetadata()["dbx_spark_settings"] || {};
    }
    getKernelName() {
        return this._context.sessionContext.kernelDisplayName;
    }
    // Deprecating other kernels shortly
    getPythonVersion() {
        return "python38";
    }
}
